#!/usr/bin/env bash

# ----------------------------
# MAIN PACKAGE MANAGER
# ----------------------------

alias i="nala install"
alias n="nala show"
alias l="nala list -N"

alias u="nala update && nala upgrade"
alias r="nala remove"
alias q="nala search"

nc () {
  nala clean
  nala autoremove
  nala autopurge
}


# ----------------------------
# Package Managers
# ----------------------------

GOPATH="$HOME/go"
# Golang list packages
alias gl="ls -1 $GOPATH/bin/"

# Golang remove binary
gr () {
 if [[ -f "$GOPATH/bin/$1" ]]; then
   echo "Are you ABSOLUTELY sure you wanna ERASE '$1' from Go ?"
   read -rp "(y/N) " grAnswer
   if [[ "$grAnswer" =~ ^(y|Y|yes|Yes)$ ]]; then
     rm -rf "$GOPATH/bin/$1"
     echo "[ERASED] '$1' from '$GOPATH/bin/'"
   else 
     echo -e "\nNothing was removed"
   fi
 else
   echo "'$1' does not exist within $GOPATH/bin/"
 fi
}


cargoc () {
  echo "Are you ABSOLUTELY sure you wanna ERASE Cache from Cargo ?"
  read -rp "(y/N) " cargocAnswer
  if [[ "$cargocAnswer" =~ ^(y|Y|yes|Yes)$ ]]; then
    rm -rf ~/.cargo
    echo "[ERASED] Cargo Cache"
  else 
    echo -e "\nNothing was removed"
  fi
}


# ----------------------------
# TOOLS / UTILITIES
# ----------------------------

alias cb="cd .."
alias cr="cd -"
alias ce="cd /data/data/org.gnu.emacs/"

mkc () {
  mkdir "$1"
  cd "$1"
}

alias c="clear"

alias v="nvim"

alias grep="grep --color=always -i"

# recursive grep
rgrep () { grep -r "$1" *; }

alias ll='eza -lah --icons=always --group-directories-first --sort=modified --time-style="+%d/%m/%Y %H:%M"'

alias sb="source $HOME/.bashrc"

alias sck="shellcheck"

alias lynx="lynx -cfg $HOME/.config/lynx/lynx.cfg"

alias ytd='yt-dlp -f "bestvideo[ext=mp4][vcodec^=avc][height<=480]+bestaudio/best[height<=480]"'

alias stard='sdcv --data-dir="storage/shared/Documents/backup/stardict"'

alias myt="$HOME/.shortcuts/yt"

progManFzf () {
  local fzfNormalMsg="$(paint bg blue " N ") $1"
  local fzfInsertMsg="$(paint bg purple " I ") $1"
  
  local fzfBindings=(
    "Tab:toggle"
    "p:toggle+up"
    "n:toggle+down"
    "a:toggle-all"
    "j:down"
    "k:up"
    "q:abort"
  )

  fzfModeBuild

  fzf -m \
  --height 15 \
  --layout reverse \
  --border sharp \
  --prompt "$fzfNormalMsg" \
  --color prompt:7 \
  --pointer '▶' \
  --marker '▶ ' \
  --bind="$allFzfBinds" \
  --header="[Tab:toggle, n:toggleDown, p:toggleUp, a:toggleAll]" "${@:2}"
}



# ----------------------------
# Programming
# ----------------------------
# This is a function that:
#   - Lists all dirs in the project
#   - Rm dirs from the project
#   - Jump to a dir inside the project
#   - Makes a new numbered dir in the project
#
# Syntax: progMan "LANG_ABBR" "PROJECT_PATH" "${@:1}"
#
# Example: progMan "Py" "~/python" "${@:1}"
progMan () {
  local langName="$1"
  local dirPath="$2"

  local rawAllDirs=($(find ${dirPath} ! -path "*/.git*" ! -path "${dirPath}" -type d))

  local allDirs="${rawAllDirs[@]//${dirPath}\//}"

  case "$3" in
    "mk")
      local projectName="$4"
      [[ -z "${projectName}" ]] && {
        read -rp "Name: " projectName

        [[ -z "${projectName}" ]] && {
          paint fg red "[ERR]" " No dir name specified"
          return 1
        }
      }

      [[ ${#rawAllDirs[@]} -eq 0 ]] && order=1 || ((order=${#rawAllDirs[@]}+1))

      local projectPath="$HOME/git/python-code/${order}_${projectName}"
      
      mkdir "${projectPath}"
      cd "${projectPath}"
      ;;

    "rm")
      [[ -z "$allDirs" ]] && {
        paint fg yellow "[Warning]" " No directories were found in ${dirPath//$HOME/\~}"
        return 0
      }

      local fzfPrompt="RM ($langName) > "
      local rmChoice=($(echo -e "${allDirs// /\\n}" |\
        progManFzf "$fzfPrompt"))

      [[ "${#rmChoice[@]}" -gt 0 ]] && {
        echo -e "Are you sure you wanna $(paint fg purple "REMOVE") the following?\n"

        lineCounter=1
        for item in "${rmChoice[@]}"; do
          paint fg blue "[${lineCounter}] $item"
          ((lineCounter=lineCounter+1))
        done

        echo "" 
        read -rp "(y/N) " rmAnswer

        if [[ "$rmAnswer" =~ ^(y|Y|yes|Yes)$ ]]; then
          echo ""
          for dir in "${rmChoice[@]}"; do
            rm -rf "$dirPath/$dir"
            paint fg purple "[Removed]" " $dir"
          done
        else
          echo -e "\nNothing was removed"
        fi
      }
      ;;

    "l")
      [[ -z "$allDirs" ]] && {
        paint fg yellow "[Warning]" " No directories were found in ${dirPath//$HOME/\~}"
        return 0
      }

      lineCounter=1
      for item in "${allDirs[@]}"; do
        paint fg blue "[${lineCounter}] ${item//$dirPath\//}"
        ((lineCounter=lineCounter+1))
      done
      ;;

    "j")
      [[ -z "$allDirs" ]] && {
        paint fg yellow "[Warning]" " No directories were found in ${dirPath//$HOME/\~}"
        return 0
      }

      local fzfPrompt="Jump ($langName) > "

      local jumpPath="$(echo -e "${allDirs// /\\n}"| progManFzf "$fzfPrompt")"

      [[ -n "$jumpPath" ]] && cd "$dirPath/$jumpPath"
      ;;
  esac
}

p () { progMan "Py" "$HOME/git/python-code" ${@:1} ;}

alias py="python3"






# ----------------------------
# Quick Jump
# ----------------------------

jumpDirs=(
  "$HOME/git"
  "$HOME/.config"
  "$HOME/data"
  "$HOME/scripts/"
  "$HOME/src"
  "$HOME/code"
)

jump () { 
  local jumpPath="$(find "${jumpDirs[@]}" -type $1 \
    ! -path '*/blog/public/*' \
    ! -path '*/blog/themes/*' \
    ! -path '*/.git/*' |\
    sed "s|^$HOME|~|g" | fzf | sed "s|^~|$HOME|")"

  if [[ -n "$jumpPath" ]]; then
    if [[ "$1" == "d" ]]; then
      history -s "cd \"$jumpPath\""
      cd "$jumpPath"
    else
      history -s "v \"$jumpPath\""
      nvim "$jumpPath"
    fi
  fi

}

j () { jump d ;}
jv () { jump f ;}



# ----------------------------
# User Scripts
# ----------------------------
alias ao="$HOME/scripts/aset -c"

alias bm="$HOME/bin/bmark"

alias t="utrash"
alias tl="utrash -l"

alias s="udots"
alias sz="udots -z"
alias si="udots -i"
alias sa="udots -a"
alias sl="udots -l"
alias sd="udots -d"


# ----------------------------
# SERVICES
# ----------------------------
hp () {
  name="${@,,}"
  hugo new posts/"${name// /-}".md
}

alias hs="hugo serve --disableFastRender --noHTTPCache"

hv () {
  editPath="$(find "$HOME/git/blog/content" -type f |\
    sed "s|$HOME/git/blog/content/||g" |\
    fzf)"

  [[ -n "$editPath" ]] && nvim "$HOME/git/blog/content/$editPath"
}

alias arias="aria2c --check-certificate=false --dir=/storage/emulated/0/Download --enable-rpc"

alias vcron="EDITOR=nvim crontab -e"

# Anki sync server
aks () {
  if [ -f $HOME/.cache/aks ]; then
    port="`awk 'NR==1{print $2}' < $HOME/.cache/aks`"
    user="`awk 'NR==2{print $2}' < $HOME/.cache/aks`"
    pass="`awk 'NR==3{print $2}' < $HOME/.cache/aks`"
  else
    echo "~/.cache/aks not found. Creating new credentials..."
    port="`shuf -i 8100-9999 -n 1`"
    read -p "Enter a username: " user
    pass="`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c10`"

    echo "port $port" >> $HOME/.cache/aks
    echo "user $user" >> $HOME/.cache/aks
    echo "pass $pass" >> $HOME/.cache/aks
 
    echo "These are your credentials. They will be shown this time only and they are stored in ~/.cache/aks"
    echo "Port: $port"
    echo "User: $user"
    echo "Pass: $pass"
  fi

  SYNC_BASE="$HOME/storage/shared/Documents/backup/anki" SYNC_USER1="$user":"$pass" SYNC_PORT="$port" anki-sync-server
}




# ----------------------------
# FILE SHORTCUTS
# ----------------------------
alias vb="nvim $HOME/.config/bash/.bashrc"
alias vbh="nvim $HOME/data/.bash_eternal_history"
alias vba="nvim $HOME/.config/bash/aliases"



# ----------------------------
# GIT
# ----------------------------

bare () { /usr/bin/git --git-dir="$HOME/git/bare" --work-tree=$HOME "$@";}

bare_specific () {
  case $1 in
    setup) 
      git init --bare "$2"
      sed -i 's|^bare ().*$|bare () { /usr/bin/git --git-dir='$2' --work-tree=$HOME "$@";}|g' $HOME/bash/aliases
      git --git-dir="$2" --work-tree=$HOME "$@" config --local status.showUntrackedFiles no
      ;;
  esac
}

git_specific () {
  case $1 in
    i) git init "${@:2}" ;;
    config)
      read -p "Enter name: " name
      read -p "Enter email: " email
      echo "[user]" >> $HOME/.gitconfig.local
      echo "  email = $email" >> $HOME/.gitconfig.local
      echo "  name = $name" >> $HOME/.gitconfig.local
      if [ ! -d $HOME/.ssh ]; then
        mkdir -p $HOME/.ssh
      fi

      ssh-keygen -t ed25519 -C "$email" -f $HOME/.ssh/"$name"
      ;;
  esac
}

git_purge () { $1 filter-branch --index-filter "git rm -rf --cached --ignore-unmatch $2" HEAD ;}

function git_options () {
    case $2 in
        # ----------------------------
        # COMMON OPTIONS
        # ----------------------------
        a) $1 add "${@:3}" ;;
        u) $1 add -u "${@:3}" ;;
        b) $1 branch "${@:3}" ;;
        rb) $1 branch -d "${@:3}" ;;
        sb) $1 checkout "${@:3}" ;;
        bsb) $1 checkout -b "${@:3}" ;;
        c) $1 commit "${@:3}" ;;
        ca) $1 commit --amend "${@:3}" ;;
        p) $1 push -u origin "${@:3}" ;;
        s) $1 status "${@:3}" ;;
        us) $1 restore --staged "${@:3}" ;;
        l) $1 log "${@:3}" ;;
        lu) $1 ls-files --others "${@:3}" ;;
        pull) $1 pull origin main --allow-unrelated-histories "${@:3}" ;;
        ds) $1 difftool --staged "${@:3}" ;;
        d) $1 difftool "${@:3}" ;;
        da) $1 difftool . "${@:3}" ;;
        r) $1 rm --cached "${@:3}" ;;
        rm) $1 rm "${@:3}" ;;
        ra) $1 remote add origin "${@:3}" ;;
        rs) $1 remote set-url origin "${@:3}" ;;
        stop) $1 update-index --skip-worktree "${@:3}" ;;
        purge) git_purge $1 "${@:3}";;
        cc) 
            $1 rebase -i HEAD~$3 "${@:4}"
            $1 commit --amend
            $1 rebase --continue
            ;;
        *)
            # ----------------------------
            # SPECIFIC OPTIONS
            # ----------------------------
            case $1 in
                git) git_specific "${@:2}" ;;
                bare) bare_specific "$2" ;;
            esac
    esac
}

function b () { git_options bare "$@" ;}
function g () { git_options git "$@" ;}
