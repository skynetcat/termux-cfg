#!/bin/bash
# ----------------------------
# PACKAGE MANAGER
# ----------------------------
alias i="nala install"
alias u="nala update && nala upgrade"
alias r="nala remove"
alias q="nala search"



# ----------------------------
# TOOLS / UTILITIES
# ----------------------------
alias ao="$HOME/scripts/aset -c"

alias t="utrash"
alias tl="utrash -l"

alias sa="udots -a"
alias sl="udots"
alias sv="nvim ~/git/udots/udots"

alias lynx="lynx -cfg $HOME/.config/lynx/lynx.cfg"

alias c="clear"

alias v="nvim"

alias vc="NVIM_APPNAME=nvchad nvim"

alias sb="source $HOME/.bashrc"

alias ll='eza -lah --icons=always --group-directories-first --sort=modified --time-style="+%d/%m/%Y %H:%M"'

alias grep="grep --color=always -i"

# recursive grep
rgrep () { grep -r "$1" *; }

alias sck="shellcheck"

alias lf="TERM=screen-256color lf -config <(cat $HOME/.config/lf/lfrc; echo set ratios 1)"

alias ytd='yt-dlp -f "bestvideo[ext=mp4][vcodec^=avc][height<=480]+bestaudio/best[height<=480]"'

alias stard='sdcv --data-dir="storage/shared/Documents/backup/stardict"'



# ----------------------------
# SERVICES
# ----------------------------
alias arias="aria2c --check-certificate=false --dir=/storage/emulated/0/Download --enable-rpc"

alias ce="EDITOR=nvim crontab -e"

# Anki sync server
aks () {
  if [ -f $HOME/.cache/aks ]; then
    port="`awk 'NR==1{print $2}' < $HOME/.cache/aks`"
    user="`awk 'NR==2{print $2}' < $HOME/.cache/aks`"
    pass="`awk 'NR==3{print $2}' < $HOME/.cache/aks`"
  else
    echo "~/.cache/aks not found. Creating new credentials..."
    port="`shuf -i 8100-9999 -n 1`"
    read -p "Enter a username: " user
    pass="`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c10`"

    echo "port $port" >> $HOME/.cache/aks
    echo "user $user" >> $HOME/.cache/aks
    echo "pass $pass" >> $HOME/.cache/aks
 
    echo "These are your credentials. They will be shown this time only and they are stored in ~/.cache/aks"
    echo "Port: $port"
    echo "User: $user"
    echo "Pass: $pass"
  fi

  SYNC_BASE="$HOME/storage/shared/Documents/backup/anki" SYNC_USER1="$user":"$pass" SYNC_PORT="$port" anki-sync-server
}




# ----------------------------
# FILE SHORTCUTS
# ----------------------------
alias vb="nvim $HOME/.config/bash/.bashrc"
alias vbh="nvim $HOME/.config/bash/.bash_eternal_history"
alias vt="nvim $HOME/.config/tmux.conf"
alias vi="nvim $HOME/scripts/install"
alias vba="nvim $HOME/.config/bash/aliases"



# ----------------------------
# GIT
# ----------------------------

bare () { /usr/bin/git --git-dir="$HOME/git/bare" --work-tree=$HOME "$@";}

bare_specific () {
  case $1 in
    setup) 
      git init --bare "$2"
      sed -i 's|^bare ().*$|bare () { /usr/bin/git --git-dir='$2' --work-tree=$HOME "$@";}|g' $HOME/bash/aliases
      git --git-dir="$2" --work-tree=$HOME "$@" config --local status.showUntrackedFiles no
      ;;
  esac
}

git_specific () {
  case $1 in
    i) git init "${@:2}" ;;
    config)
      read -p "Enter name: " name
      read -p "Enter email: " email
      echo "[user]" >> $HOME/.gitconfig.local
      echo "  email = $email" >> $HOME/.gitconfig.local
      echo "  name = $name" >> $HOME/.gitconfig.local
      if [ ! -d $HOME/.ssh ]; then
        mkdir -p $HOME/.ssh
      fi

      ssh-keygen -t ed25519 -C "$email" -f $HOME/.ssh/"$name"
      ;;
  esac
}

git_purge () { $1 filter-branch --index-filter "git rm -rf --cached --ignore-unmatch $2" HEAD ;}

function git_options () {
    case $2 in
        # ----------------------------
        # COMMON OPTIONS
        # ----------------------------
        a) $1 add "${@:3}" ;;
        u) $1 add -u "${@:3}" ;;
        b) $1 branch "${@:3}" ;;
        rb) $1 branch -d "${@:3}" ;;
        sb) $1 checkout "${@:3}" ;;
        bsb) $1 checkout -b "${@:3}" ;;
        c) $1 commit "${@:3}" ;;
        ca) $1 commit --amend "${@:3}" ;;
        p) $1 push -u origin "${@:3}" ;;
        s) $1 status "${@:3}" ;;
        us) $1 restore --staged "${@:3}" ;;
        l) $1 log "${@:3}" ;;
        lu) $1 ls-files --others "${@:3}" ;;
        pull) $1 pull origin main --allow-unrelated-histories "${@:3}" ;;
        ds) $1 difftool --staged "${@:3}" ;;
        d) $1 difftool "${@:3}" ;;
        da) $1 difftool . "${@:3}" ;;
        r) $1 rm --cached "${@:3}" ;;
        rm) $1 rm "${@:3}" ;;
        ra) $1 remote add origin "${@:3}" ;;
        rs) $1 remote set-url origin "${@:3}" ;;
        stop) $1 update-index --skip-worktree "${@:3}" ;;
        purge) git_purge $1 "${@:3}";;
        cc) 
            $1 rebase -i HEAD~$3 "${@:4}"
            $1 commit --amend
            $1 rebase --continue
            ;;
        *)
            # ----------------------------
            # SPECIFIC OPTIONS
            # ----------------------------
            case $1 in
                git) git_specific "${@:2}" ;;
                bare) bare_specific "$2" ;;
            esac
    esac
}

function b () { git_options bare "$@" ;}
function g () { git_options git "$@" ;}
